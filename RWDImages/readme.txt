This project is an experiment in responsive image strategy. To achieve responsiveness, images are exported in multiple sizes to correspond to the maximum possible image width at each breakpoint. That is, if the website is elastic and fills the entire viewport the image will be sized for the maximum screen dimension, not the viewport or page width. 

Screen dimension was chosen because anything less might require a reload of a higher-res image at some point, for example if the browser window started out small and was enlarged. I decided it was better to load an image larger than might be needed rather than load multiple images on browser resizing. As the viewport resizes downward, the image shrinks. It is not replaced. A smaller image would only be loaded on a page refresh. This removes the need for a resize listener.

I wanted to start with a default image as a placeholder for my responsive image because the <img> is a unique element. It has an alt attribute, natural block properties and the rare ability to align vertically against other elements, making it much more suitable than a <div>. I chose the single-pixel gif as my default image as it is the smallest image available and can be reused. If there is concern about using an empty image, the smallest image size can be used as a default, adding a small extra overhead. At the smallest screen size (mobile) you will still only load one image. At larger sizes the image will come in blurry (since it is enlarged over 100%), then sharpen as it is replaced by the higher-res image. The effect is not unpleasant.

JavaScript is used to swap out the images, as JavaScript is already required to find screen width and height. For a backup, the <html> element starts with a class of “nojs”, which is replaced immediately with a class of “js” by JavaScript. If no JavaScript is present, the “nojs” class remains and it is used to apply a background image to the blank gif. That fallback image will not load otherwise, since non-matching CSS is ignored.

The JavaScript also writes the width class on the body tag. This requires only a small extra amount of code and can be used for applying background images or other responsive CSS. Although applying background images to the blank.gif with CSS is also a viable responsive strategy, doing it with JavaScript allows the alternate sizes to be applied at directly to the image element using the data attribute. In CMS scenarios, those editing images in web pages often have access to the HTML but not to the CSS.
